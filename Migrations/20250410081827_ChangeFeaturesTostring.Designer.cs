// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OntuPhdApi.Data;
using OntuPhdApi.Models.Programs;

#nullable disable

namespace OntuPhdApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250410081827_ChangeFeaturesTostring")]
    partial class ChangeFeaturesTostring
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OntuPhdApi.Models.Programs.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "code");

                    b.Property<int?>("ProgramModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "title");

                    b.HasKey("Id");

                    b.HasIndex("ProgramModelId");

                    b.ToTable("Job");

                    b.HasAnnotation("Relational:JsonPropertyName", "jobs");
                });

            modelBuilder.Entity("OntuPhdApi.Models.Programs.ProgramComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComponentCredits")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "componentCredits");

                    b.Property<int?>("ComponentHours")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "componentHours");

                    b.Property<string>("ComponentName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "componentName");

                    b.Property<string>("ComponentType")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "componentType");

                    b.Property<List<string>>("ControlForm")
                        .HasColumnType("jsonb")
                        .HasAnnotation("Relational:JsonPropertyName", "controlForm");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "programId");

                    b.Property<int?>("ProgramModelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProgramModelId");

                    b.ToTable("ProgramComponent");

                    b.HasAnnotation("Relational:JsonPropertyName", "components");
                });

            modelBuilder.Entity("OntuPhdApi.Models.Programs.ProgramDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contenttype");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("filepath");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("filesize");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaddate");

                    b.HasKey("Id");

                    b.ToTable("programdocuments", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "programDocument");
                });

            modelBuilder.Entity("OntuPhdApi.Models.Programs.ProgramModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Accredited")
                        .HasColumnType("boolean")
                        .HasColumnName("accredited")
                        .HasAnnotation("Relational:JsonPropertyName", "accredited");

                    b.Property<int?>("Credits")
                        .HasColumnType("integer")
                        .HasColumnName("credits")
                        .HasAnnotation("Relational:JsonPropertyName", "credits");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("degree")
                        .HasAnnotation("Relational:JsonPropertyName", "degree");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text")
                        .HasColumnName("descriptions")
                        .HasAnnotation("Relational:JsonPropertyName", "descriptions");

                    b.Property<List<string>>("Directions")
                        .HasColumnType("jsonb")
                        .HasColumnName("directions")
                        .HasAnnotation("Relational:JsonPropertyName", "directions");

                    b.Property<FieldOfStudy>("FieldOfStudy")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("field_of_study")
                        .HasAnnotation("Relational:JsonPropertyName", "fieldOfStudy");

                    b.Property<List<string>>("Form")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("form")
                        .HasAnnotation("Relational:JsonPropertyName", "form");

                    b.Property<string>("LinkFaculty")
                        .HasColumnType("text")
                        .HasColumnName("link_faculty")
                        .HasAnnotation("Relational:JsonPropertyName", "linkFaculty");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("NameCode")
                        .HasColumnType("text")
                        .HasColumnName("name_code")
                        .HasAnnotation("Relational:JsonPropertyName", "nameCode");

                    b.Property<string>("Objects")
                        .HasColumnType("text")
                        .HasColumnName("objects")
                        .HasAnnotation("Relational:JsonPropertyName", "objects");

                    b.Property<ProgramCharacteristics>("ProgramCharacteristics")
                        .HasColumnType("jsonb")
                        .HasColumnName("program_characteristics")
                        .HasAnnotation("Relational:JsonPropertyName", "programCharacteristics");

                    b.Property<ProgramCompetence>("ProgramCompetence")
                        .HasColumnType("jsonb")
                        .HasColumnName("program_competence")
                        .HasAnnotation("Relational:JsonPropertyName", "programCompetence");

                    b.Property<int?>("ProgramDocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("programdocumentid")
                        .HasAnnotation("Relational:JsonPropertyName", "programDocumentId");

                    b.Property<string>("Purpose")
                        .HasColumnType("text")
                        .HasColumnName("purpose")
                        .HasAnnotation("Relational:JsonPropertyName", "purpose");

                    b.Property<List<string>>("Results")
                        .HasColumnType("jsonb")
                        .HasColumnName("results")
                        .HasAnnotation("Relational:JsonPropertyName", "results");

                    b.Property<Speciality>("Speciality")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("speciality")
                        .HasAnnotation("Relational:JsonPropertyName", "speciality");

                    b.Property<int?>("Years")
                        .HasColumnType("integer")
                        .HasColumnName("years")
                        .HasAnnotation("Relational:JsonPropertyName", "years");

                    b.HasKey("Id");

                    b.HasIndex("ProgramDocumentId");

                    b.ToTable("program", (string)null);
                });

            modelBuilder.Entity("OntuPhdApi.Models.Programs.Job", b =>
                {
                    b.HasOne("OntuPhdApi.Models.Programs.ProgramModel", null)
                        .WithMany("Jobs")
                        .HasForeignKey("ProgramModelId");
                });

            modelBuilder.Entity("OntuPhdApi.Models.Programs.ProgramComponent", b =>
                {
                    b.HasOne("OntuPhdApi.Models.Programs.ProgramModel", null)
                        .WithMany("Components")
                        .HasForeignKey("ProgramModelId");
                });

            modelBuilder.Entity("OntuPhdApi.Models.Programs.ProgramModel", b =>
                {
                    b.HasOne("OntuPhdApi.Models.Programs.ProgramDocument", "ProgramDocument")
                        .WithMany()
                        .HasForeignKey("ProgramDocumentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProgramDocument");
                });

            modelBuilder.Entity("OntuPhdApi.Models.Programs.ProgramModel", b =>
                {
                    b.Navigation("Components");

                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
